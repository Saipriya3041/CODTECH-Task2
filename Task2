import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import SMOTE
# Load the dataset
df = pd.read_csv('/content/creditcard_2023.csv')
df
# Check for missing values
print(df.isnull().sum())
print(df.columns)# if time is missing
columns_to_drop = ['time', 'Amount']
for column in columns_to_drop:
  if column in df.columns:
    df.drop([column], axis=1, inplace=True)
X = df.drop('Class', axis=1)
y = df['Class']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)
smote = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
# Train the model
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train_resampled, y_train_resampled)
# Make predictions
y_pred_rf = rf_model.predict(X_test)
#Now let's implement an anomaly detection technique using the Isolation Forest algorithm.
from sklearn.ensemble import IsolationForest

# Train the Isolation Forest model
iso_forest = IsolationForest(contamination=0.01, random_state=42)
y_train_iso_pred = iso_forest.fit_predict(X_train)

# Convert predictions to binary (1 for normal, -1 for anomaly)
y_train_iso_pred = [1 if x == -1 else 0 for x in y_train_iso_pred]

# Evaluate the model on the training set
print(confusion_matrix(y_train, y_train_iso_pred))
print(classification_report(y_train, y_train_iso_pred))

# Predict on the test set
y_test_iso_pred = iso_forest.predict(X_test)
y_test_iso_pred = [1 if x == -1 else 0 for x in y_test_iso_pred]

# Evaluate the model on the test set
print(confusion_matrix(y_test, y_test_iso_pred))
print(classification_report(y_test, y_test_iso_pred))
